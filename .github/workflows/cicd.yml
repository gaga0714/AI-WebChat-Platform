name: "CI/CD (aiwebchat: Vue3 + Proxy)"

on:
  push:
    branches: [ "main" ]

env:
  WEB_IMAGE:   ${{ format('{0}/aiwebchat-web',   secrets.DOCKERHUB_USERNAME) }}
  PROXY_IMAGE: ${{ format('{0}/aiwebchat-proxy', secrets.DOCKERHUB_USERNAME) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 构建 & 推送 前端镜像 ---
      - name: Build & Push aiwebchat-web
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:latest
            ${{ env.WEB_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 构建 & 推送 代理镜像 ---
      - name: Build & Push aiwebchat-proxy
        uses: docker/build-push-action@v6
        with:
          context: ./proxy
          push: true
          tags: |
            ${{ env.PROXY_IMAGE }}:latest
            ${{ env.PROXY_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 准备部署包（compose + .env） ---
      - name: Prepare deploy bundle
        run: |
          mkdir -p deploy
          cp docker-compose.prod.yml deploy/docker-compose.yml
          cat > deploy/.env <<EOF
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          WEB_IMAGE=${{ env.WEB_IMAGE }}
          PROXY_IMAGE=${{ env.PROXY_IMAGE }}
          EOF

      # --- 预写 known_hosts（避免首次连接交互，带 IPv4/IPv6 回退 + 重试） ---
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || ssh-keyscan -6 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || (sleep 3 && ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts)

      # --- 写入私钥文件（供原生 ssh 使用）
      - name: Write SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/aiwebchat_key
          chmod 600 ~/.ssh/aiwebchat_key

      # --- 确保远端目录存在（避免 scp 报错或上传到别处）
      - name: Ensure target dir on server
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /opt/aiwebchat"

      # --- 上传到服务器 /opt/aiwebchat （去掉 deploy/ 这一层）
      - name: Upload deploy bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy/*"
          target: "/opt/aiwebchat"
          strip_components: 1

      # --- 使用原生 ssh 进行部署 ---
      - name: Deploy on server (native ssh)
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
          set -e
          cd /opt/aiwebchat
          echo "[server] files in /opt/aiwebchat:"
          ls -la

          # 写入 DeepSeek KEY（此处内容已在 Runner 侧展开）
          cat > api.env <<'EOT'
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          EOT

          # 选择 docker compose 命令
          if docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif docker-compose version >/dev/null 2>&1; then
            DC="docker-compose"
          else
            echo "ERROR: Docker Compose is not installed." >&2
            exit 1
          fi

          # 部署
          $DC pull
          $DC up -d --remove-orphans
          docker image prune -f
          EOF
