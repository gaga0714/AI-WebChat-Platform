name: "CI/CD (aiwebchat: Vue3 + Proxy)"

on:
  push:
    branches: [ "main" ]

env:
  WEB_IMAGE:   ${{ format('{0}/aiwebchat-web',   secrets.DOCKERHUB_USERNAME) }}
  PROXY_IMAGE: ${{ format('{0}/aiwebchat-proxy', secrets.DOCKERHUB_USERNAME) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 构建 & 推送 前端镜像 ---
      - name: Build & Push aiwebchat-web
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:latest
            ${{ env.WEB_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 构建 & 推送 代理镜像 ---
      - name: Build & Push aiwebchat-proxy
        uses: docker/build-push-action@v6
        with:
          context: ./proxy
          push: true
          tags: |
            ${{ env.PROXY_IMAGE }}:latest
            ${{ env.PROXY_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 准备部署包（compose + .env） ---
      - name: Prepare deploy bundle
        run: |
          mkdir -p deploy
          cp docker-compose.prod.yml deploy/docker-compose.yml
          cat > deploy/.env <<EOF
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          WEB_IMAGE=${{ env.WEB_IMAGE }}
          PROXY_IMAGE=${{ env.PROXY_IMAGE }}
          EOF

      # --- known_hosts，避免首次连接交互 ---
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || ssh-keyscan -6 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || (sleep 3 && ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts)

      # --- 写入私钥（供原生 ssh 使用）
      - name: Write SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/aiwebchat_key
          chmod 600 ~/.ssh/aiwebchat_key

      # --- 确保远端目录存在
      - name: Ensure target dir on server
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /opt/aiwebchat"

      # --- 上传到服务器 /opt/aiwebchat（去掉 deploy/ 这一层）
      - name: Upload deploy bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy/*"
          target: "/opt/aiwebchat"
          strip_components: 1

      # --- 部署（原生 ssh；镜像加速 + 超时扩展；无 docker login） ---
      - name: Deploy on server (native ssh)
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
          set -e
          cd /opt/aiwebchat
          echo "[server] files in /opt/aiwebchat:"
          ls -la

          # 0) 确保 Docker 已安装并启动
          if ! command -v docker >/dev/null 2>&1; then
            echo "[server] installing docker..."
            curl -fsSL https://get.docker.com | sh
          fi
          if ! (systemctl is-active --quiet docker || service docker status >/dev/null 2>&1); then
            echo "[server] starting docker..."
            systemctl enable --now docker || service docker start
          fi

          # 1) 配置 daemon.json（优先阿里云加速器）
          mkdir -p /etc/docker
          cp /etc/docker/daemon.json /etc/docker/daemon.json.bak 2>/dev/null || true
          cat >/etc/docker/daemon.json <<'JSON'
          {
            "registry-mirrors": [
              "https://gg0kfs89.mirror.aliyuncs.com",
              "https://docker.m.daocloud.io",
              "https://mirror.ccs.tencentyun.com"
            ]
          }
          JSON

          systemctl daemon-reload
          systemctl restart docker
          for i in {1..20}; do docker info >/dev/null 2>&1 && break; sleep 1; done

          echo "[server] Registry Mirrors in use:"
          docker info | awk '/Registry Mirrors/{flag=1;print;next} /Live Restore Enabled/{flag=0} flag'

          # 2) 选择 compose 命令
          if docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            echo "[server] installing docker compose plugin..."
            apt-get update -y && apt-get install -y docker-compose-plugin || true
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              apt-get install -y docker-compose || true
              DC="docker-compose"
            fi
          fi

          # 3) 写入 DeepSeek KEY
          cat > api.env <<'EOT'
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          EOT

          # 4) 载入环境变量
          if [ -f .env ]; then
            set -a; . ./.env; set +a
          fi

          # 5) 提前登录 Docker Hub（保证回退拉取也能用到凭证）
          if [ -n "${DOCKERHUB_USERNAME:-}" ] && [ -n "${DOCKERHUB_TOKEN:-}" ]; then
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin || true
          fi

          export DOCKER_CLIENT_TIMEOUT=600
          export COMPOSE_HTTP_TIMEOUT=600

          # 6) 带重试的 pull（显式指定镜像名）
          pull_with_retry() {
            local tries=5
            local web="${WEB_IMAGE:-${DOCKERHUB_USERNAME}/aiwebchat-web}:latest"
            local proxy="${PROXY_IMAGE:-${DOCKERHUB_USERNAME}/aiwebchat-proxy}:latest"
            for ((i=1; i<=tries; i++)); do
              echo "[server] pull try #$i: $web / $proxy"
              if docker pull "$web" && docker pull "$proxy"; then
                return 0
              fi
              sleep $((10*i))
            done
            return 1
          }

          # 7) 回退镜像代理拉取并 retag
          mirror_pull_and_retag() {
            local web="${WEB_IMAGE:-${DOCKERHUB_USERNAME}/aiwebchat-web}:latest"
            local proxy="${PROXY_IMAGE:-${DOCKERHUB_USERNAME}/aiwebchat-proxy}:latest"
            local mirrors=(
              "<你的阿里云加速器ID>.mirror.aliyuncs.com"
              "docker.m.daocloud.io"
              "dockerproxy.com"
              "hub.uuuadc.top"
              "dockerpull.com"
            )
            for m in "${mirrors[@]}"; do
              echo "[server] try mirror: $m"
              for img in "$web" "$proxy"; do
                local mirrored="$m/${img}"
                echo "[server] pulling $mirrored"
                if docker pull "$mirrored"; then
                  echo "[server] retag $mirrored -> $img"
                  docker tag "$mirrored" "$img" || true
                else
                  echo "[server] pull from $m failed for $mirrored"
                fi
              done
            done
          }

          if pull_with_retry; then
            echo "[server] direct pull ok"
          else
            echo "[server] direct pull failed, try mirrors + retag ..."
            mirror_pull_and_retag
          fi

          # 8) 启动服务
          $DC up -d --remove-orphans
          docker image prune -f
          EOF
