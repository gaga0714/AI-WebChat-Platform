name: "CI/CD (aiwebchat: Vue3 + Proxy via Aliyun ACR)"

on:
  push:
    branches: [ "main" ]

env:
  WEB_IMAGE:   ${{ format('{0}/aiwebchat-web',   secrets.DOCKERHUB_USERNAME) }}
  PROXY_IMAGE: ${{ format('{0}/aiwebchat-proxy', secrets.DOCKERHUB_USERNAME) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # --- 拉取代码 ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- 设置 Buildx ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- 登录 Docker Hub（可保留为备份发布渠道） ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 登录阿里云 ACR（用于构建阶段推送到 ACR） ---
      - name: Login to Aliyun ACR
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}
          registry: ${{ secrets.ALIYUN_ACR_REGISTRY }} # 例如 registry.cn-hangzhou.aliyuncs.com（不要带 https://）

      # --- 构建 & 推送 aiwebchat-web ---
      - name: Build & Push aiwebchat-web
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:latest
            ${{ env.WEB_IMAGE }}:${{ github.sha }}
            ${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-web:latest
            ${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 构建 & 推送 aiwebchat-proxy ---
      - name: Build & Push aiwebchat-proxy
        uses: docker/build-push-action@v6
        with:
          context: ./proxy
          push: true
          tags: |
            ${{ env.PROXY_IMAGE }}:latest
            ${{ env.PROXY_IMAGE }}:${{ github.sha }}
            ${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-proxy:latest
            ${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-proxy:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 准备部署包（把 ACR 镜像地址和凭证写进 .env） ---
      - name: Prepare deploy bundle
        run: |
          mkdir -p deploy
          cp docker-compose.prod.yml deploy/docker-compose.yml
          cat > deploy/.env <<EOF
          WEB_IMAGE=${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-web
          PROXY_IMAGE=${{ secrets.ALIYUN_ACR_REGISTRY }}/${{ secrets.ALIYUN_ACR_NAMESPACE }}/aiwebchat-proxy
          ALIYUN_ACR_USERNAME=${{ secrets.ALIYUN_ACR_USERNAME }}
          ALIYUN_ACR_PASSWORD=${{ secrets.ALIYUN_ACR_PASSWORD }}
          ALIYUN_ACR_REGISTRY=${{ secrets.ALIYUN_ACR_REGISTRY }}
          EOF

      # --- known_hosts ---
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || ssh-keyscan -6 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null \
          || (sleep 3 && ssh-keyscan -4 -p ${{ secrets.SSH_PORT }} -T 15 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts)

      # --- 写私钥 ---
      - name: Write SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/aiwebchat_key
          chmod 600 ~/.ssh/aiwebchat_key

      # --- 确保远端目录 ---
      - name: Ensure target dir on server
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /opt/aiwebchat"

      # --- 上传部署包 ---
      - name: Upload deploy bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy/*"
          target: "/opt/aiwebchat"
          strip_components: 1

      # --- 部署 ---
      - name: Deploy on server (native ssh)
        run: |
          ssh -i ~/.ssh/aiwebchat_key -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
          set -euo pipefail
          cd /opt/aiwebchat
          echo "[server] files in /opt/aiwebchat:"
          ls -la

          # 0) 先加载 .env（务必在 docker login 前）
          if [ -f .env ]; then
            set -a; . ./.env; set +a
          fi

          # 1) 校验必需变量，缺失就立刻报错
          : "${ALIYUN_ACR_USERNAME:?ALIYUN_ACR_USERNAME not set}"
          : "${ALIYUN_ACR_PASSWORD:?ALIYUN_ACR_PASSWORD not set}"
          : "${ALIYUN_ACR_REGISTRY:?ALIYUN_ACR_REGISTRY not set}"

          echo "[server] ACR registry: ${ALIYUN_ACR_REGISTRY}, user: ${ALIYUN_ACR_USERNAME}"

          # 2) 确保 Docker
          if ! command -v docker >/dev/null 2>&1; then
            echo "[server] installing docker..."
            curl -fsSL https://get.docker.com | sh
          fi
          if ! (systemctl is-active --quiet docker || service docker status >/dev/null 2>&1); then
            echo "[server] starting docker..."
            systemctl enable --now docker || service docker start
          fi

          # 3) 登录阿里云 ACR（使用 .env 里的凭证）
          docker login -u "${ALIYUN_ACR_USERNAME}" -p "${ALIYUN_ACR_PASSWORD}" "${ALIYUN_ACR_REGISTRY}"

          # 4) 确保 docker compose 可用
          if docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            apt-get update -y && apt-get install -y docker-compose-plugin || apt-get install -y docker-compose
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              DC="docker-compose"
            fi
          fi

          # 5) 写 API KEY（如需）
          cat > api.env <<'EOT'
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          EOT

          # 6) 拉取并启动
          export DOCKER_CLIENT_TIMEOUT=600
          export COMPOSE_HTTP_TIMEOUT=600
          $DC pull
          $DC up -d --remove-orphans
          docker image prune -f
          EOF
