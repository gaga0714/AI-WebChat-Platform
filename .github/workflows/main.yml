name: 🐳 aiwebchat Docker CI/CD

on:
  push:
    branches:
      - main

env:
  # 统一管理容器镜像名称和标签
  IMAGE_NAME: aiwebchat-app
  IMAGE_TAG: ${{ github.sha }}
  
  # Docker Hub 或其他容器仓库信息
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  
  # 部署服务器信息，用于SSH连接
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PORT: 22

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      # ✅ 新增步骤：设置 buildx 以支持多架构构建
      - name: 🛠 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ✅ 关键修改：登录到 Docker 镜像仓库
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # ✅ 关键修改：构建并推送 Docker 镜像
      - name: 📦 Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}

      # ❌ 移除旧的 SSH/SCP 步骤，仅保留部署
      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            # 拉取最新镜像
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # 停止并移除旧的容器
            echo "Stopping and removing old container..."
            sudo docker stop ${{ env.IMAGE_NAME }} || true
            sudo docker rm ${{ env.IMAGE_NAME }} || true

            # 启动新的容器
            echo "Starting new container..."
            sudo docker run -d --name ${{ env.IMAGE_NAME }} -p 80:80 ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            
            echo "Deployment finished successfully!"